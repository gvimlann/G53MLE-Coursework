%Author Yipin Jin

function  tree = decision_tree_learning(features, labels)
%-----
if all(~diff(labels))
    tree.op = [];
    tree.kids = [];
    tree.class = majority_value(labels);
%-----
else
    [best_feature, best_threshold] = choose_attribute(features, labels);
    if isempty(labels)
        tree.op = [];
        tree.kids = [];
        tree.class = majority_value(labels);
        examples1 = [];
        examples2 = [];

    else
        af = labels < best_threshold;
        for sampleIndex = 1:size(features,1)
            if features(sampleIndex,best_feature) < best_threshold
                examples1(count,:) = features(sampleIndex,:);
                examples1 = [examples1 , 
                count = count + 1;
                
            else
                examples2(count1,:) = features(sampleIndex,:);
                count1 = count1 + 1;
            end
        end
        disp(size(examples2));
        disp(size(examples1));
        A = labels(af);
        B = labels(~af);
        tree.kids = [decision_tree_learning(best_feature, A), decision_tree_learning(best_feature, B)];
        tree.op = best_feature;
        tree.class = [];
    end
end